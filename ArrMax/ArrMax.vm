// Contains a function ArrMax.arrMax that finds and returns the largest element in the array a of length b.
// a & b are both supplied as arguments

// Put your code here.
function ArrMax.arrMax 1
//arg m _> pointer to the array (arg 0), n _> num of ele in arr (arg 1)

push argument 0
pop pointer 1 //set that to base addr of array
push that 0 //value at that[0]
pop local 0 // local 0 (max) = that[0]

// init loop
push constant 1
pop local 1 // local 1 == i == 1

//loop
label LOOP_START
push local 1 //i
push argument 1 //num of elements in array
lt
if-goto CONTINUE_LOOP
goto END_LOOP

label CONTINUE_LOOP
//compare max (local 0) with that[i]
push argument 0 //start of array
push local 1 //i
add //increment *arr == *arr+1 or arr[1]
pop pointer 1 //that points to the current element in the array 
push that 0 //compare next ele (pointer 1) to current that[i] (maybe error source)
gt 
if-goto UPDATE_MAX
goto NEXT_ELEMENT

label UPDATE_MAX
//update max to that[i]
push that 0
pop local 0

label NEXT_ELEMENT
//increment i
push local 1 //i
push constant 1
add
pop local 1

goto LOOP_START

label END_LOOP
push local 0
return
